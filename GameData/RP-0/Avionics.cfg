// *** Non-control probe cores
// Disable attitude control on non-control parts. FIXME Add to this patch
// all probes which should not have independent attitude control.
@PART[SXTSputnik|FASAExplorerProbe|RP0probeSounding0-3m]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleScienceCore
	}
}

// *** Command parts (Crewed)
// FIXME: Add any other 1-person capsules here
// Also Gemini
@PART[mk1pod|FASAMercuryPod|FASAGeminiPod2|FASAGeminiPod2White]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleAvionics
		massLimit = 5.0
	}
}
@PART[FASABigGeminiRetroModule]
{
	//yes, you can do this without a ModuleCommand
	MODULE
	{
		name = ModuleAvionics
		massLimit = 50.0
	}
}

// FIXME do this for anything else Apollo sized
@PART[FASAApollo_CM|Mark1-2]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleAvionics
		massLimit = 100.0
	}
}

// FIXME do this for other landers
@PART[FASALM_AscentStage|mk2LanderCabin|MEMLander|SXTLander]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleAvionics
		massLimit = 30.0
	}
}
@PART[landerCabinSmall]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleAvionics
		massLimit = 20.0
	}
}

@PART[cupola]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleAvionics
		massLimit = 0.0
	}
}

// ** Command parts (uncrewed)
@PART[probeCoreOcto2]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleAvionics
		massLimit = 0.2
	}
	@MODULE[ModuleCommand]
	{
		@RESOURCE[ElectricCharge]
		{
			@rate = 0.05
		}
	}
}

// Ranger / Mariner
@PART[SXTHECSRanger]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleAvionics
		massLimit = 0.25
	}
}

// Ranger Block III
@PART[probeCoreHex]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleAvionics
		massLimit = 0.5
	}
}

// Surveyor
@PART[probeCoreOcto]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleAvionics
		massLimit = 1.0
	}
}

// Generic satellite bus
@PART[probeCoreCube]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleAvionics
		massLimit = 10.0
	}
}

// *** Guidance units (including stages)
// Can be used with a proc fairing out to 2.67m as Jupiter nosecone too, so 60t.
@PART[FASAExplorerNosecone]
{
	MODULE
	{
		name = ModuleAvionics
		massLimit = 60.0
	}
}
// MRLV core (with Jupiter-C avionics)
@PART[FASA_Mercury_LFT_Long]
{
	MODULE
	{
		name = ModuleAvionics
		massLimit = 60.0
	}
}

// Able/Delta guidance
@PART[RP0probeAvionics0-81m]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleAvionics
		massLimit = 8.0
	}
}

// FIXME: Do this for other small upper stages.
@PART[FASAAgenaProbe|RP0probeAvionics1-5m]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleAvionics
		massLimit = 12.0
	}
}

// Saturn IU, S-IVB. Note we make a stock version, RP0probeAvionics66m
@PART[FASAApolloIU|FASAApalloLFTJ2Plate|RP0probeAvionics66m]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleAvionics
		massLimit = 20000.0
	}
}
// Early Saturn IU (Saturn II Block II)
@PART[SXT375mProbe]:FOR[RP-0]
{
	@description ^= :$: Allows full control over the vessel, up to the tonnage limit (cumulative).:
	MODULE
	{
		name = ModuleAvionics
		massLimit = 1500.0
	}
}

// ** Titan
// Transtage
@PART[FASAGeminiLFECentarTwin]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleAvionics
		massLimit = 35.0
	}
}
// Titan I upper stage, Titan I was 105t but let's add some margin.
@PART[TitanIUpper]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleAvionics
		massLimit = 120.0
	}
}

// Titan II / IIGLV upper
@PART[FASAGeminiLFTMed]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleAvionics
		massLimit = 160.0
	}
}

// Titan II/III/IV upper
@PART[FASAGeminiLFTMedWhite]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleAvionics
		massLimit = 1000.0
	}
}

// ** Centaurs
// Centaur A/B/C/D/D1
@PART[FASAGeminiLFTCentar]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleAvionics
		massLimit = 40.0
	}
}
// Centaur D2
@PART[FASAGeminiLFTCentarCSM_D2]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleAvionics
		massLimit = 45.0
	}
}

// ** Atlas
// Atlas D / MALV
@PART[FASA_Atlas_LFT_Cone]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleAvionics
		massLimit = 120.0
	}
}
// Atlas E/F
@PART[FASA_Atlas_LFT_Cone2]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleAvionics
		massLimit = 125.0
	}
}
// Atlas F-mod (appears identical to E/F)
@PART[FASAAtlasFMod]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleAvionics
		massLimit = 130.0
	}
}
// Atlas H
@PART[FASAAtlasH]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleAvionics
		massLimit = 160.0
	}
}
// Atlas SLV-3 (Appears to be Atlas E/F)
@PART[FASAMercuryAtlasLFTLong]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleAvionics
		massLimit = 125.0
	}
}
// Atlas SLV-3A (used as booster for Agena D / GATV)
@PART[FASAAtlasSLV3A]:FOR[RP-0]
{
	MODULE
	{
		name = ModuleAvionics
		massLimit = 150.0
	}
}


// Since mass is now cumulative, for LVs where both the first and second
// stages have avionics, they can be apportioned like that; for LVs
// like Titan or Saturn where there's only avionics on an upper stage,
// it needs to cover the whole LV.

// *** Cloned parts
// small and large stackmount probes: place copies in Basic Orbital, originals later. ???
+PART[probeStackLarge]:AFTER[RealismOverhaul]
{
	@name = GuidanceEarly3m
	@title = Guidance Unit (Early), 3m
	@description = This avionics unit allows full control over the vessel, up to the tonnage limit (cumulative).
	@MODULE[ModuleCommand]
	{
		@RESOURCE[ElectricCharge]
		{
			@rate = 2.0
		}
	}
	@RESOURCE[ElectricCharge]
	{
		@amount = 2160
		@maxAmount = 2160
	}
	MODULE
	{
		name = ModuleAvionics
		massLimit = 300.0
	}
	@MODULE[ModuleSPU]
	{
		!IsRTCommandStation = DEL
	}
}
+PART[probeStackSmall]:AFTER[RealismOverhaul]
{
	@name = GuidanceEarly2m
	@title = Guidance Unit (Early), 2m
	@description = This avionics unit allows full control over the vessel, up to the tonnage limit (cumulative).
	@MODULE[ModuleCommand]
	{
		@RESOURCE[ElectricCharge]
		{
			@rate = 1.0
		}
	}
	@RESOURCE[ElectricCharge]
	{
		@amount = 1080
		@maxAmount = 1080
	}
	MODULE
	{
		name = ModuleAvionics
		massLimit = 120.0
	}
	@MODULE[ModuleSPU]
	{
		!IsRTCommandStation = DEL
	}
}

// mini, for Vanguard
+PART[probeStackLarge]:AFTER[RealismOverhaul]
{
	@name = GuidanceEarly1m
	@title = Guidance Unit (Early), 1m
	@description = This avionics unit allows full control over the vessel, up to the tonnage limit (cumulative).
	@MODEL
	{
		@scale = 0.4, 0.4, 0.4
	}
	@node_stack_bottom = 0.0, -0.076, 0.0, 0.0, 1.0, 0.0, 1
	@node_stack_top = 0.0, 0.076, 0.0, 0.0, 1.0, 0.0, 1
	@mass = 0.35
	@MODULE[ModuleCommand]
	{
		@RESOURCE[ElectricCharge]
		{
			@rate = 3
		}
	}
	@RESOURCE[ElectricCharge]
	{
		@amount = 1080
		@maxAmount = 1080
	}
	MODULE
	{
		name = ModuleAvionics
		massLimit = 45.0
	}
	@MODULE[ModuleSPU]
	{
		!IsRTCommandStation = DEL
	}
}